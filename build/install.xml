<?xml version="1.0" encoding="utf-8" ?>
<!-- bda-build-template version 1.2.0   -->
<!--
$Id: install.xml 1791 2009-07-01 21:03:49Z saksass $
$HeadURL: http://gforge.nci.nih.gov/svnroot/automation/trunk/software/bda-build-template/software/build/install.xml $
-->

<project name="clinConn-installer" default="install" basedir="." 
	xmlns:ivy="antlib:org.apache.ivy.ant"
	>
	<description>
		This build file is part of the bda-build-templates project. This is the master install file for the project.  It should be placed in project/software.  This script is copied into the distribution and  executed from the extracted distribution.  It is run by typing "ant" from the master project build.xml or from command line. This script has two flows install and upgrade.
		Install will do the following
 			* Install binaries
			* Configure binaries
			* Install application
			* Configure application
			* Re-create database
			* Upgrade database
		Upgrade will do the following
			* Install application
			* Configure application
			* Upgrade database
		The script includes target that may not be used by all projects, but are included in here becaue it is a template. This script has targets to deal with the following, you can delete targets you don't want to work with
		Application servers (option for grid services also)
			* JBoss
			* Tomcat
		Databases
			* MySQL
			* PostgreSQL
			* Oracle
		This script requires java and ant to run. Every thing else it needs is included in the distribution.
	</description>

	<!-- Properties file related properties and tasks -->
	<echo message="Passed in properties file of ${properties.file}."/>
	<property environment="env" />
	<property file="local.properties"/>
	<property file="project.properties"/>
	<!-- load the properties file -->
	<property name="properties.file" value="${basedir}/install.properties"/>
	<echo message="Using properties file of ${properties.file}."/>
	<available file="${properties.file}" property="properties.file.exists" />
	<fail unless="properties.file.exists" message="The properties.file ${properties.file} does not exist, please make sure that you pass in an accurate file name with the 'ant -Dproperties.file=somepath/somefile', otherwise the build will fail."/>
	<replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=(.*[\w\d\/\{\}\\]+)[ \t]+\r*$" replace="\1=\2"/>
	<replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=[ \t]+(.*[\w\d\/\{\}\\]+)\r*$" replace="\1=\2"/>
	<property file="${properties.file}" />
	
	<!-- Generic properties -->
	<property name="project.name" value="clinicalConnector"/>
	<property name="env.name" value="local"/>
	<property name="log.dir" location="${basedir}/logs" />
	<property name="working.dir" location="${basedir}/working" />
	<property name="temp.dir" location="${working.dir}/temp" />


	<!-- Install Time properties -->
	<!-- Source and target directories -->
	<property name="bda-utils.dir" location="${basedir}/bda-utils" />
	<property name="tools.dir" location="${basedir}/${tools.dist.relative.dir}" />
	<property name="common.dir.src" location="${basedir}/${common.dist.relative.dir}" />
	<property name="common.dir.dest" location="${working.dir}/${common.dist.relative.dir}" />
	<property name="db.dir.src" location="${basedir}/${db.dist.relative.dir}" />
	<property name="db.dir.dest" location="${working.dir}/${db.dist.relative.dir}" />
	<property name="db-install.dir.dest" location="${working.dir}/${db-install.dist.relative.dir}" />
	<property name="db-upgrade.dir.dest" location="${working.dir}/${db-upgrade.dist.relative.dir}" />

	<!-- ClinicalConnector WAR -->
	<!--<property name="clinConn-webapp.dir.dist" location="${basedir}/${clinConn-webapp.dist.relative.dir}" />-->
	<property name="clinConn-webapp.ds.file" value="clinConn-ds.xml" />
	<property name="clinConn-webapp.name" value="clinicalConnector" />
	<property name="clinConn-webapp.war.file" value="${clinConn-webapp.name}.war" />
	<property name="clinConn-webapp.dir.dist" location="${basedir}/${clinConn-webapp.name}/${clinConn-webapp.dist.relative.dir}" />

	<!-- C3DGridService WAR -->
	<!--<property name="C3DGridService-webapp.dir.dist" location="${basedir}/${C3DGridService-webapp.dist.relative.dir}" />-->
	<property name="C3DGridService-webapp.ds.file" value="clinConn-ds.xml" />
	<property name="C3DGridService-webapp.name" value="C3DGrid" />
	<property name="C3DGridService-webapp.war.file" value="${C3DGridService-webapp.name}.war" />
	<property name="C3DGridService-webapp.dir.dist" location="${basedir}/${C3DGridService-webapp.name}/${C3DGridService-webapp.dist.relative.dir}" />

	<!-- PRC related echos 
	<echo message="${exclude.tomcat}" /> -->

	<!-- Grid related properties -->
	<!-- <property name="grid.resource.dir" location="${basedir}/${tools.dist.relative.dir}" />
	<property name="grid.application.dir" location="${basedir}/${grid-sample.dist.relative.dir}" />
	<property name="grid.artifact.file" value="sample-wsrf-war.zip" />
	<property name="grid.dir.dest" value="wsrf" />
	<property name="grid.application.name" value="Sample" /> -->
	
	<property name="grid.resource.dir" location="${basedir}/${tools.dist.relative.dir}" /> 
	<property name="grid.application.dir" location="${basedir}/${grid-sample.dist.relative.dir}" /> 
	<property name="grid.artifact.file" value="sample-wsrf-war.zip" /> 
	<property name="grid.dir.dest.jboss" value="${clinConn-webapp.name}.war" /> 
	<property name="grid.dir.dest" value="${clinConn-webapp.name}" />
	<property name="grid.dir.dest.tomcat" value="${clinConn-webapp.name}" /> 
	<property name="grid.application.name" value="ClinicalConnector" /> 
	<property name="resource.file.jboss-globus-lib" value="${cagrid-libs.binaries.file}" /> 
	<property name="resource.file.jboss-globus-war" value="${cagrid-base-war.binaries.file}" /> 

        <!-- PRC Synch GTS related install from https://wiki.nci.nih.gov/display/BuildandDeploymentAutomation/How+to+configure+a+Secure+Grid+Listener -->
        <basename file="${jboss.grid.secure.cert.location}" property="jboss.grid.secure.cert.file"/>
                <dirname file="${jboss.grid.secure.cert.location}" property="jboss.grid.secure.dir"/>
                <basename file="${jboss.grid.secure.key.location}" property="jboss.grid.secure.key.file"/>
                <basename file="${tomcat.grid.secure.cert.location}" property="tomcat.grid.secure.cert.file"/>
                <dirname file="${tomcat.grid.secure.cert.location}" property="tomcat.grid.secure.dir"/>
                <basename file="${tomcat.grid.secure.key.location}" property="tomcat.grid.secure.key.file"/>

	<!-- Paths -->
	<path id="bda-utils.classpath">
		<fileset dir="${bda-utils.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<!-- Task definitions -->
	<taskdef uri="antlib:org.apache.ant.antunit" resource="org/apache/ant/antunit/antlib.xml" classpathref="bda-utils.classpath"/>
	<taskdef name="for" classname="net.sf.antcontrib.logic.ForTask" classpathref="bda-utils.classpath"/>
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="bda-utils.classpath"/>
	<taskdef resource="liquibasetasks.properties" classpathref="bda-utils.classpath"/>
	<taskdef name="groovy" classname="org.codehaus.groovy.ant.Groovy" classpathref="bda-utils.classpath"/>

	<!-- Includes-->
	<import file="${bda-utils.dir}/bda-build-utils-${bda.version}.xml" />

	<!-- Clean/make working dir -->
	<delete dir="${working.dir}" failonerror="false"/>
	<mkdir dir="${working.dir}" />
      <!--<mkdir dir="${db-install.dir.dest}" /> -->
	<!--<mkdir dir="${db-upgrade.dir.dest}" /> -->

	<!-- Start logging moved out of target so all targets are logged --> 
	<!--<property name="install-logs.dir" location="${application.base.path}/change-logs"/> -->
	<property name="install-logs.dir" location="${log.dir}"/>
	<mkdir dir="${install-logs.dir}"/>
	<tstamp>
		<format property="install.time" pattern="yyyy-MM-dd-HH-mm" />
	</tstamp>
	<record name="${install-logs.dir}/install-${install.time}.log" action="start"/>

	<target name="common:init:pre">
		<echo message="common:init:pre" />
		<!-- Set application.base.path based on platform -->
		<condition property="application.base.path" value="${application.base.path.linux}">
			<or>
				<os family="unix" />
				<os family="mac" />
			</or>
		</condition>
	
		<condition property="application.base.path" value="${application.base.path.windows}">
			<os family="windows" />
		</condition>
		<echo message="application.base.path=${application.base.path}"/>
		<property name="tomcat.home" value="${application.base.path}/${tomcat.relative.path}"/>
		<echo message="tomcat.home=${application.base.path}/${tomcat.relative.path}"/>
	</target>

	<target name="common:tomcat:init" depends="common:init:pre" unless="exclude.tomcat">
		<echo message="common:tomcat:init" />
		<property name="tomcat.ssl.enable" value="false"/>
		<property name="tomcat.home" value="${application.base.path}/${tomcat.relative.path}"/>
		<property name="tomcat.application.url" value="http://${tomcat.hostname}:${tomcat.port.http}/${clinConn-webapp.name}"/>
		<basename file="${tomcat.ssl.keystore.location}" property="tomcat.ssl.keystore.file"/>
		<dirname file="${tomcat.ssl.keystore.location}" property="tomcat.ssl.keystore.dir"/>
		<basename file="${tomcat.grid.secure.cert.location}" property="tomcat.grid.secure.cert.file"/>
		<dirname file="${tomcat.grid.secure.cert.location}" property="tomcat.grid.secure.dir"/>
		<basename file="${tomcat.grid.secure.key.location}" property="tomcat.grid.secure.key.file"/>
		<property name="tomcat.sock.ports" value="${tomcat.port.http},${tomcat.port.ajp},${tomcat.port.shutdown}"/>
	</target>

	<target name="common:init" depends="common:init:pre">
		<echo message="common:init" />
		<property name="install.running" value="true"/>
		<!-- clinConn-webapp can use either Oracle or MySQL or PostgreSQL as its database platform, this is controled by the database.type property.  Based on the value of this property sent several variables for use during install -->
		<echoproperties prefix="database"/>
		<switch value="${database.type}">
			<case value="oracle">
				<property name="database.dialect" value="org.hibernate.dialect.OracleDialect"/>
				<property name="database.driver.file" value="${bda-utils.dir}/ojdbc14-10.2.0.4.0.jar"/>
				<property name="database.driver" value="oracle.jdbc.driver.OracleDriver"/>
				<property name="database.schema" value="${database.name}"/>
			</case>
			<!--<case value="mysql">
				<property name="database.dialect" value="org.hibernate.dialect.MySQLDialect"/>
				<property name="database.driver.file" value="${bda-utils.dir}/mysql-connector-java-5.0.8.jar"/>
				<property name="database.driver" value="com.mysql.jdbc.Driver"/>
				<property name="database.schema" value="${database.name}"/>
			</case>
			<case value="postgresql">
				<property name="database.dialect" value="org.hibernate.dialect.PostgreSQLDialect"/>
				<property name="database.driver.file" value="${bda-utils.dir}/postgresql-jdbc3-8.3-604.jar"/>
				<property name="database.driver" value="org.postgresql.Driver"/>
				<property name="database.schema" value="public"/>
			</case>-->
			<default>
				<fail message="Invalid database type ${database.type}"/>
			</default>
		</switch>
	
		<path id="jdbc.driver.classpath">
			<pathelement location="${database.driver.file}"/>
		</path>

		<property name="properties.template.file" value="${basedir}/properties.template" />
		<filterset id="embedded.filterset">
			<filter token="application.base.path" value="${application.base.path}"/>
			<filter token="application.url" value="${application.url}"/>
			<filter token="database.url" value="${database.url}"/>
			<filter token="database.user" value="${database.user}"/>
			<filter token="database.password" value="${database.password}"/>
			<filter token="database.system.url" value="${database.system.url}"/>
			<filter token="csm.database.user" value="${csm.database.user}"/>
			<filter token="csm.database.password" value="${csm.database.password}"/>
			<filter token="csm.database.url" value="${csm.database.url}"/>
			<!-- added internal properties that may be used in a filtered copy -->
			<filter token="database.driver" value="${database.driver}"/>
			<!-- added for liquibase -->
			<filter token="db-upgrade.run.dir" value="${db-upgrade.dir.dest}/${database.type}"/>
			<filter token="tomcat.home" value="${tomcat.home}"/>
			<filter token="database.dialect" value="${database.dialect}"/>
			<filter token="hibernate.cfg.file.path" value="${hibernate.cfg.file.path}"/>
			<filter token="env.LOGNAME" value="${env.LOGNAME}"/>
			<filter token="env.JAVA_HOME" value="${env.JAVA_HOME}"/>
			<filter token="project.name" value="project.name"/>
			<filter token="" value=""/>
		</filterset>

		<!--OS Temp dir -->
		<condition property="os.temp.dir" value="/tmp">
			<or>
				<os family="unix" />
				<os family="mac" />
			</or>
		</condition>
	
		<condition property="os.temp.dir" value="c:/temp">
			<os family="windows" />
		</condition>
		<!-- Copy files to ensure values containing variables are expanded, such properties are stored in embedded.filterset and then copy with filter files -->
		<copy todir="${common.dir.dest}" filtering="true">
			<fileset dir="${common.dir.src}">
				<include name="**/*"/>
			</fileset>
			<filterset refid="embedded.filterset"/>
			<filterset>
				<filtersfile file="${properties.file}"/>
				<filtersfile file="project.properties"/>
			</filterset>
		</copy> 
	</target>

	<target name="diag">
		<echoproperties/>
	</target>

	<target name="install:common:clean" description="Removes all files from the local filesystem" depends="
		common:init,
 		install:tomcat:clean
		">
	</target>

	<target name="install:tomcat:clean" unless="exclude.tomcat" depends="common:tomcat:init">
		<sleep seconds="5" />
		<property name="backup.count" value="5"/>
		<if>
			<not>
				<equals arg1="${exclude.tomcat.backup}" arg2="true"/>
			</not>
			<then>
				<property name="backup.tomcat.base.dir" location="${application.base.path}/backup/tomcat"/>
		
				<backup-dir
					src.dir="${tomcat.home}"
					backup.base.dir="${backup.tomcat.base.dir}"
					backup.count="${backup.count}"
					/>
			</then>
		</if>
		<delete dir="${tomcat.home}"/>
	</target>

	<target name="install:database:prep" description="Copies db files with filtering" unless="exclude.database" depends="common:init">
		<echo message="install:database:prep" />
		<property name="db.prop.list" value="database.url,database.user,database.password,database.name"/>
		<echo  message="Checking if database properties exist: ${db.prop.list}"/>
		<properties-exist properties.list="${db.prop.list}"/>
		<echoproperties prefix="database"/>
		<copy todir="${db.dir.dest}" filtering="true">
			<fileset dir="${db.dir.src}">
				<include name="**/*"/>
			</fileset>
			<filterset refid="embedded.filterset"/>
			<filterset>
				<filtersfile file="${properties.file}"/>
				<filtersfile file="project.properties"/>
			</filterset>
		</copy>
		<!--<copy todir="${db.dir.dest}/oracle" filtering="true">
			<fileset dir="${db.dir.src}">
				<include name="**/*"/>
			</fileset>
			<filterset refid="embedded.filterset"/>
			<filterset>
				<filtersfile file="${properties.file}"/>
				<filtersfile file="project.properties"/>
			</filterset>
		</copy>-->
		<mkdir dir="${os.temp.dir}/${project.name}"/>
		<copy todir="${os.temp.dir}/${project.name}" filtering="true" flatten="true" overwrite="true">
			<fileset dir="${db.dir.dest}">
				<include name="**/db-upgrade.xml"/>
			</fileset>
		</copy>
	</target>

	<target name="install:database" description="Runs datbase creation scripts then calls uprade database." unless="exclude.database"
		depends="
		common:init,
		install:database:prep,
		install:database:validation:pre-install
		"> 
		<!-- Drop all schema objects or re-create the db -->
		<!-- <database-clean/> -->
		<!-- Run baseline scripts stored in db.install.create.${database.type}.file.list variable -->
		<echo message="Checking for database type inside install:database"/>
		<switch value="${database.type}">
			<case value="oracle">
				<database-install
					db.install.create.file.list="${db.install.create.oracle.file.list}"
					sql.delimiter=";"
					/>
				<database-install
					db.install.create.file.list="${db.install.create.oracle.proc.list}"
					sql.delimiter="/"
					sql.delimitertype="row"
					/>
			</case>
			<case value="postgresql">
				<fail  message="database type mysql not allowed"/>
				<!--<database-install
					db.install.create.file.list="${db.install.create.postgresql.file.list}"
					sql.delimiter="/"
					sql.delimitertype="row"
					/>-->
			</case>
			<case value="mysql">
				<fail  message="database type mysql not allowed"/>
				<!--<database-install
					db.install.create.file.list="${db.install.create.mysql.file.list}"
					/> -->
			</case>
		</switch>
		<!--<database-upgrade
			database.changelog.file="${os.temp.dir}/${project.name}/db-upgrade.xml"
			/>
		<database-tag/>-->
	</target>

	<target name="install:common:validation:pre-install" description="Runs pre-install validation checks bda-utils" depends="common:init">
		<validate-pre-install-common
			ant.check.version="${ant.minimum.version}"
			java.check.version.major="${java.major.version}"
			java.check.version.minor="${java.minor.version}"
			/>
	</target>

	<target name="install:tomcat:validation:pre-install" description="Runs pre-install validation checks bda-utils" 
		depends="
		common:tomcat:init,
		common:init,
		install:common:validation:pre-install
		">
		<validate-pre-install-tomcat
			/>
	</target>

	<target name="install:database:validation:pre-install" description="Runs pre-install validation checks bda-utils" 
		depends="
		common:init,
		install:common:validation:pre-install
		">
            <echo message="Checking for database type inside install:database"/>
		<switch value="${database.type}">
			<case value="oracle">
				<validate-pre-install-database
					database.version="${mysql.minimum.version}"
				/>
			</case>
			<case value="postgresql">
				<fail  message="database type postgresql not allowed"/>
			</case>
			<case value="mysql">
				<fail  message="database type mysql not allowed"/>
			</case>
		</switch>

		
	</target>

	<target name="install:tomcat:validation:pre-install:ports" description="Checks to see if configured ports are listenting and fails buld, meant to be run after jboss:stop"
		depends="
		common:init,
		install:tomcat:stop
		">
		<validate-pre-tomcat-ports
			/>
	</target>

	<target name="install:common:validation:post-install" description="Run post-install checks from bda-utils"
		depends="
		common:init
		">
		<validate-post-common />
	</target>

	<target name="install:tomcat:validation:post-install" description="Run post-install checks from bda-utils"
		depends="
		common:tomcat:init,
		common:init,
		install:tomcat:start
		">
		<if>
			<not>
				<isset property="exclude.start.servers"/>
			</not>
			<then>
				<validate-post-tomcat />
			</then>
		</if>
	</target>

	<target name="install:tomcat" description="Wrapper scripts that calls all required targets to install the tomcat container" unless="exclude.tomcat"
		depends="
		common:tomcat:init,
 		common:init,
 		install:tomcat:validation:pre-install,
 		install:common:validation:pre-install,
 		install:tomcat:stop,
 		install:tomcat:validation:pre-install:ports,
 		install:tomcat:clean,
 		install:tomcat:binaries,
 		install:tomcat:configure,
 		install:tomcat:clinConn-webapp:re-configure,
 		install:tomcat:clinConn-webapp,
 		install:tomcat:clinConn-webapp:configure,
 		install:tomcat:grid,
		install:tomcat:grid:configure,
 		install:post:tomcat,
 		install:tomcat:start,
 		install:tomcat:validation:post-install
		">
	</target>

	<target name="install" description="Installs and configures JBOSS, creates database, and deploys application" 
		depends="
		common:tomcat:init,
 		common:init,
 		install:common:validation:pre-install,
 		install:tomcat:validation:pre-install,
 		install:database:validation:pre-install,
 		install:tomcat:stop,
 		install:tomcat:validation:pre-install:ports,
 		install:common:clean,
 		install:database,
 		install:tomcat,
 		install:common:post,
 		install:common:validation:post-install
		">
		<!-- PRC original depends="
		common:tomcat:init,
 		common:init,
 		install:common:validation:pre-install,
 		install:tomcat:validation:pre-install,
 		install:database:validation:pre-install,
 		install:tomcat:stop,
 		install:tomcat:validation:pre-install:ports,
 		install:common:clean,
 		install:database,
 		install:tomcat,
 		install:common:post,
 		install:common:validation:post-install
		"> -->

	</target>

	<!-- PRC modified original "upgrade:tomcat" from this: -->
	<!-- <target name="upgrade:tomcat" description="Wrapper target to call all targets required to upgrade tomcat container." unless="exclude.tomcat" depends="upgrade:tomcat:init,common:init,upgrade-dac:tomcat">-->
	<!-- To this: -->
	<target name="upgrade:tomcat" description="Wrapper target to call all targets required to upgrade tomcat container." unless="exclude.tomcat" depends="upgrade:tomcat:init,common:init,upgrade-dac:tomcat">
	</target>

	<!-- PRC modified original "upgrade" from this: -->
	<!-- <target name="upgrade" description="Upgrades JBoss and Database" depends="upgrade:common:init,common:init,upgrade-dac">-->
	<!-- To this: -->
	<target name="upgrade" description="Upgrades Tomcat and Clinical Connector" depends="upgrade:tomcat,upgrade:database">
	</target>

	<target name="upgrade-with-dbinstall" description="Upgrades JBoss and Database" depends="upgrade:common:init,common:init,upgrade-dac:with-dbinstall">
	</target>

	<target name="upgrade-dac:tomcat" description="Wrapper target to call all targets required to upgrade tomcat container." unless="exclude.tomcat"
		depends="
		upgrade:tomcat:init,
 		common:init,
 		common:tomcat:init,
 		install:tomcat:validation:pre-install,
 		install:common:validation:pre-install,
 		install:tomcat:stop,
 		install:tomcat:validation:pre-install:ports,
 		install:tomcat:configure,
 		install:tomcat:clinConn-webapp:re-configure,
 		install:tomcat:clinConn-webapp,
 		install:tomcat:clinConn-webapp:configure,
 		install:tomcat:C3DGridService-webapp,
 		install:tomcat:C3DGridService-webapp:configure,
		install:tomcat:grid,
		install:tomcat:grid:configure,
 		upgrade:post:tomcat,
 		install:post:tomcat,
 		install:tomcat:start,
 		install:tomcat:validation:post-install
		">
	</target>
      <!-- PRC Origianl upgrade-dac:tomcat
      <target name="upgrade-dac:tomcat" description="Wrapper target to call all targets required to upgrade tomcat container." unless="exclude.tomcat"
		depends="
		upgrade:tomcat:init,
 		common:init,
 		common:tomcat:init,
 		install:tomcat:validation:pre-install,
 		install:common:validation:pre-install,
 		install:tomcat:stop,
 		install:tomcat:validation:pre-install:ports,
 		install:tomcat:clean,
 		install:tomcat:binaries,
 		install:tomcat:configure,
 		install:tomcat:clinConn-webapp:re-configure,
 		install:tomcat:clinConn-webapp,
 		install:tomcat:clinConn-webapp:configure,
		install:tomcat:grid,
		install:tomcat:grid:configure,
 		upgrade:post:tomcat,
 		install:post:tomcat,
 		install:tomcat:start,
 		install:tomcat:validation:post-install
		">
	</target>
      -->
	<target name="upgrade-dac" description="Upgrades JBoss and Database"
		depends="
		upgrade:common:init,
 		common:init,
 		common:tomcat:init,
 		install:common:validation:pre-install,
 		install:tomcat:validation:pre-install,
 		install:database:validation:pre-install,
 		install:tomcat:stop,
 		upgrade:database,
 		upgrade:tomcat,
 		install:common:validation:post-install
		">
	</target>

	<target name="upgrade-dac:with-dbinstall" description="Upgrades JBoss and Database"
		depends="
		upgrade:common:init,
 		common:init,
 		common:tomcat:init,
 		install:common:validation:pre-install,
 		install:tomcat:validation:pre-install,
 		install:database:validation:pre-install,
 		install:tomcat:stop,
 		install:database,
 		upgrade:tomcat,
 		install:common:validation:post-install
		">
	</target>

	<target name="upgrade-cm:tomcat" description="Wrapper target to call all targets required to upgrade tomcat container." unless="exclude.tomcat"
		depends="
		upgrade:tomcat:init,
 		common:init,
 		common:tomcat:init,
 		install:tomcat:validation:pre-install,
 		install:common:validation:pre-install,
 		install:tomcat:stop,
 		install:tomcat:validation:pre-install:ports,
 		install:tomcat:configure,
 		install:tomcat:clinConn-webapp:re-configure,
 		install:tomcat:clinConn-webapp,
 		install:tomcat:clinConn-webapp:configure,
		install:tomcat:grid,
		install:tomcat:grid:configure,
 		upgrade:post:tomcat,
 		install:post:tomcat,
 		install:tomcat:start,
 		install:tomcat:validation:post-install
		">
	</target>

	<target name="upgrade-cm" description="Upgrades JBoss and Database"
		depends="
		upgrade:common:init,
 		common:init,
 		common:tomcat:init,
 		install:common:validation:pre-install,
 		install:tomcat:validation:pre-install,
 		install:database:validation:pre-install,
 		install:tomcat:stop,
 		upgrade:database,
 		upgrade:tomcat,
 		install:common:validation:post-install
		">
	</target>

	<target name="upgrade-cm:with-dbinstall" description="Upgrades JBoss and Database"
		depends="
		upgrade:common:init,
 		common:init,
 		common:tomcat:init,
 		install:common:validation:pre-install,
 		install:tomcat:validation:pre-install,
 		install:database:validation:pre-install,
 		install:tomcat:stop,
 		install:database,
 		upgrade:tomcat,
 		install:common:validation:post-install
		">
	</target>

	<target name="upgrade-ncm:tomcat" description="Wrapper target to call all targets required to upgrade tomcat container." unless="exclude.tomcat"
		depends="
		upgrade:tomcat:init,
 		common:init,
 		common:tomcat:init,
 		install:tomcat:validation:pre-install,
 		install:common:validation:pre-install,
 		install:tomcat:stop,
 		install:tomcat:validation:pre-install:ports,
 		install:tomcat:clinConn-webapp:re-configure,
 		install:tomcat:clinConn-webapp,
 		install:tomcat:clinConn-webapp:configure,
		install:tomcat:grid,
		install:tomcat:grid:configure,
 		install:post:tomcat,
 		install:tomcat:start,
 		install:tomcat:validation:post-install
		">
	</target>

	<target name="upgrade-ncm" description="Upgrades JBoss and Database"
		depends="
		upgrade:common:init,
 		common:init,
 		common:tomcat:init,
 		install:common:validation:pre-install,
 		install:tomcat:validation:pre-install,
 		install:database:validation:pre-install,
 		install:tomcat:stop,
 		upgrade:database,
 		upgrade:tomcat,
 		install:common:validation:post-install
		">
	</target>

	<target name="upgrade-ncm:with-dbinstall" description="Upgrades JBoss and Database"
		depends="
		upgrade:common:init,
 		common:init,
 		common:tomcat:init,
 		install:common:validation:pre-install,
 		install:tomcat:validation:pre-install,
 		install:database:validation:pre-install,
 		install:tomcat:stop,
 		install:database,
 		upgrade:tomcat,
 		install:common:validation:post-install
		">
	</target>

	<target name="upgrade:database" description="Upgrades database using BDA Datbase Upgrade process." unless="exclude.database"
		depends="
		common:init,
		install:database:prep,
		install:database:validation:pre-install
		">
		<!--db.install.upgrade.oracle.file.list=C3DGridService_Tables_and_Data_UPGRADE_Bare.sql
		    db.install.upgrade.oracle.proc.list=C3DGridService_ProcFunc_Bare.sql
		    db.install.upgrade.oracle.security=C3DGridService_ObjectSecurity_Bare.sql
		    db.install.upgrade.oracle.synonyms=C3DGridService_ObjectSynonyms_Bare.sql -->

		<echo message="Checking for database type inside install:database"/>
		<switch value="${database.type}">
			<case value="oracle">
				<echo message="Upgrade Database Objects with ${db.install.upgrade.oracle.file.list}"/>
				<database-install
					db.install.create.file.list="${db.install.upgrade.oracle.file.list}"
					sql.delimiter=";"
					/>
				<echo message="Upgrade Procedures/Functions/Packages with ${db.install.upgrade.oracle.proc.list}"/>
				<database-install
					db.install.create.file.list="${db.install.upgrade.oracle.proc.list}"
					sql.delimiter="/"
					sql.delimitertype="row"
					/>
				<echo message="Applying Database Security with ${db.install.upgrade.oracle.security}"/>
				<database-install
					db.install.create.file.list="${db.install.upgrade.oracle.security}"
					sql.delimiter=";"
					/>
				<echo message="Applying Synonyms ${db.install.upgrade.oracle.synonyms}"/>
				<database-install
					db.install.create.file.list="${db.install.upgrade.oracle.synonyms}"
					sql.delimiter=";"
					/>
			</case>
			<case value="postgresql">
				<fail  message="database type mysql not allowed"/>
				<!--<database-install
					db.install.create.file.list="${db.install.create.postgresql.file.list}"
					sql.delimiter="/"
					sql.delimitertype="row"
					/>-->
			</case>
			<case value="mysql">
				<fail  message="database type mysql not allowed"/>
				<!--<database-install
					db.install.create.file.list="${db.install.create.mysql.file.list}"
					/> -->
			</case>
		</switch>
		<!--<database-upgrade
			database.changelog.file="${os.temp.dir}/${project.name}/db-upgrade.xml"
			/>
		<database-tag/>-->
		<!--<database-upgrade
			database.changelog.file="${os.temp.dir}/${project.name}/db-upgrade.xml"
			/>
		<database-tag/>-->
	</target>

	<target name="upgrade:database:tag" description="Tags current state of database with a tag to allow for rollback of database to previous versions." unless="exclude.database"
		depends="
		upgrade:database:init,
		common:init,
		install:database:prep
		">
		<database-tag/>
	</target>

	<target name="upgrade:database:rollback" description="Rolls back database to previous tagged version using rollback scripts." unless="exclude.database"
		depends="
		upgrade:database:init,
		common:init,
		install:database:prep
		">
		<database-rollback/>
	</target>

	<target name="install:tomcat:binaries" description="Install tomcat binaries" unless="exclude.tomcat" depends="common:init">
		<delete dir="${tomcat.home}"/>
		<dirname file="${tomcat.home}" property="tomcat.base.dir"/>
		<echo message="Unzipping Tomcat from ${tools.dir}/${tomcat.binaries.file} to ${tomcat.base.dir} "/>
		<unzip dest="${tomcat.base.dir}" src="${tools.dir}/${tomcat.binaries.file}" />
		<if>    
			<os family="unix"/>
			<then>  
				<chmod dir="${tomcat.home}/bin" perm="ugo+rx" 
					includes="**/*.sh"/>
			</then>
		</if>
	</target>

	<target name="install:tomcat:configure" description="Configure tomcat (change ports)" unless="exclude.tomcat" depends="common:init">
		<!-- PRC Checking the directories -->
		<echo message="tomcat.relative.path=${tomcat.relative.path}" />
		<echo message="tomcat.binaries.relative.dir=${tomcat.binaries.relative.dir}" />
		<echo message="tomcat.home=${tomcat.home}" />
		<tomcat-configure
			tomcat.grid.configure="true"
			/>
	</target>

	<target name="install:tomcat:stop" description="Stop Tomcat" unless="exclude.tomcat" depends="common:init">
		<if>
			<available file="${tomcat.home}/bin/shutdown.sh"/>
			<then>
				<echo message="Shutting down tomcat"/>
				<tomcat-stop tomcat.home="${tomcat.home}"/>
			</then>
			<else>
				<echo message="Tomcat not found , not shutting down tomcat"/>
			</else>
		</if>
	</target>

	<target name="install:tomcat:start" description="Start Tomcat" unless="exclude.tomcat" depends="common:init">
		<if>    
			<not>   
				<isset property="exclude.start.servers"/>
			</not>  
			<then>  
				<tomcat-start tomcat.home="${tomcat.home}"/>
			</then> 
		</if>   
	</target>

	<target name="install:clinConn-grid" description="Wrapper target for Grid application targets"
		depends="
		common:init
		">
	</target>

	<target name="install:tomcat:grid" description="Deploy grid to tomcat" unless="exclude.tomcat" depends="common:init">
		<mkdir dir="${tomcat.home}/webapps/${grid.dir.dest}"/>
		<unzip dest="${tomcat.home}/common/lib" src="${grid.resource.dir}/${resource.file.jboss-globus-lib}">
			<patternset>
				<exclude name="**/cog-tomcat.jar"/>
			</patternset>
		</unzip>
		<unzip dest="${tomcat.home}/server/lib" src="${grid.resource.dir}/${resource.file.jboss-globus-lib}" >
			<patternset>
				<include name="**/cog-tomcat.jar"/>
			</patternset>
		</unzip>
		<!--<unzip dest="${tomcat.home}/webapps/${grid.dir.dest}" src="${grid.application.dir}/${grid.artifact.file}" /> -->
	</target>

	<target name="install:tomcat:grid:configure" description="Configure tomcat-application" unless="exclude.tomcat" depends="common:init">
		<!--
		<grid-appserver-configure
			appserver.conf.dir="${tomcat.home}/conf"
			appserver.webapp.dir="${tomcat.home}/webapps"
			appserver.server-xml.file="${tomcat.home}/conf/server.xml"
			appserver.server-xml.service.name="Catalina"
			appserver.port.http="${tomcat.port.http}"
			appserver.port.ssl="${tomcat.port.ssl}"
			appserver.hostname="${tomcat.hostname}"
			appserver.external.http.host="${tomcat.external.http.host}"
			grid.external.secure.host="${grid.external.secure.host}"
			grid.external.secure.port="${grid.external.secure.port}"
			/>
		-->
		<!-- Prc Trying to get this to work -->
		<!-- Reset these variables to the correct values before executing Grid Configure -->
			<var name="grid.resource.dir" value="${basedir}/${tools.dist.relative.dir}" /> 
			<var name="grid.application.dir" value="${basedir}/${grid-sample.dist.relative.dir}" /> 
			<var name="grid.artifact.file" value="sample-wsrf-war.zip" /> 
			<var name="grid.dir.dest.jboss" value="${clinConn-webapp.name}.war" /> 
			<var name="grid.dir.dest" value="${clinConn-webapp.name}" />
			<var name="grid.dir.dest.tomcat" value="${clinConn-webapp.name}" /> 
			<var name="grid.application.name" value="ClinicalConnector" /> 
		<tomcat-configure-grid
		/>
	</target>

	<target name="install:common:post" depends="
		common:init,
 		install:post:tomcat
		">
	</target>

	<target name="install:post:tomcat" unless="exclude.tomcat" depends="common:init">
		<if>
			<not>
				<equals arg1="${exclude.tomcat.backup}" arg2="true"/>
			</not>
			<then>
				<property name="changelogFile" location="${install-logs.dir}/changeLog-${install.time}.txt"/>
				<property name="compare1.dir" location="${backup.tomcat.base.dir}/backup/${tomcat.binaries.relative.dir}"/>
				<property name="compare2.dir" location="${tomcat.home}"/>
				<report-dir-diff
					dir1="${backup.tomcat.base.dir}/backup/${tomcat.binaries.relative.dir}"
					dir2="${tomcat.home}"
					reportFile="${install-logs.dir}/changeLog-tomcat-${install.time}.diff"
					/>
				
				<!-- not needed for tomcat
				<mkdir dir="${tomcat.home}/server/${tomcat.server.name}/log"/>
				<mkdir dir="${backup.tomcat.base.dir}/backup/${tomcat.binaries.relative.dir}/server/${tomcat.server.name}/log"/>
				<copy todir="${tomcat.home}/server/${tomcat.server.name}/log">
					<fileset dir="${backup.tomcat.base.dir}/backup/${tomcat.binaries.relative.dir}/server/${tomcat.server.name}/log">
						<include name="*"/>
					</fileset>
				</copy>
				-->
			</then>
		</if>
	</target>

	<target name="install:tomcat:clinConn-webapp" description="Deploy clinConn-webapp and common libraries to tomcat installation" unless="exclude.tomcat" depends="common:init">
		<echo message="clinConn-webapp.dir.dist=${clinConn-webapp.dir.dist}" />
		<echo message="clinConn-webapp.war.file=${clinConn-webapp.war.file}" />
		<echo message="clinConn-Destination=${tomcat.home}/webapps/${clinConn-webapp.name}" />
		<delete dir="${tomcat.home}/temp"/>
		<delete dir="${tomcat.home}/work"/>
		<delete dir="${tomcat.home}/webapps/${clinConn-webapp.name}"/>
		<!-- unwar the inbound service war file (wsrf-clinicalConnector) --> 
		<copy file="${clinConn-webapp.dir.dist}/${clinConn-webapp.war.file}" 
		      tofile="${clinConn-webapp.dir.dist}/${clinConn-webapp.war.file}.back" overwrite="true" /> 
		<unwar src="${clinConn-webapp.dir.dist}/${clinConn-webapp.war.file}" 
                   dest="${tomcat.home}/webapps/${clinConn-webapp.name}"> 
                    <patternset>
                        <include name="**/*"/>
                        <exclude name="**/*struts2-core-2.1.8.1.jar"/>
                    </patternset>
            </unwar> 
		<copy file="${clinConn-webapp.dir.dist}/${clinConn-webapp.war.file}" todir="${tomcat.home}/webapps" overwrite="true" />
		<!--  Many NCI applications require clm for csm, so you can point this to where you have the version you want to use
		<copy file="${bda-utils.dir}/clm-3.2.jar" todir="${tomcat.home}/server/${tomcat.server.name}/lib" overwrite="true" />
		-->
		<copy file="${database.driver.file}" todir="${tomcat.home}/common/lib" overwrite="true" />
		
	</target>

	<target name="install:tomcat:C3DGridService-webapp" description="Deploy clinConn-webapp and common libraries to tomcat installation" unless="exclude.tomcat" depends="common:init">
		<echo message="C3DGridService-webapp.dir.dist=${C3DGridService-webapp.dir.dist}" />
		<echo message="C3DGridService-webapp.war.file=${C3DGridService-webapp.war.file}" />
		<echo message="C3DGridService-Destination=${tomcat.home}/webapps/${C3DGridService-webapp.name}" />
		<delete dir="${tomcat.home}/temp"/>
		<delete dir="${tomcat.home}/work"/>
		<delete dir="${tomcat.home}/webapps/${C3DGridService-webapp.name}"/>
		<!-- unwar the inbound service war file (wsrf-clinicalConnector) --> 
		<copy file="${C3DGridService-webapp.dir.dist}/${C3DGridService-webapp.war.file}" 
		      tofile="${C3DGridService-webapp.dir.dist}/${C3DGridService-webapp.war.file}.back" overwrite="true" /> 
		<unwar src="${C3DGridService-webapp.dir.dist}/${C3DGridService-webapp.war.file}" 
                   dest="${tomcat.home}/webapps/${C3DGridService-webapp.name}"> 
                    <patternset>
                        <include name="**/*"/>
                        <exclude name="**/*struts2-core-2.1.8.1.jar"/>
                    </patternset>
            </unwar> 
		<copy file="${C3DGridService-webapp.dir.dist}/${C3DGridService-webapp.war.file}" todir="${tomcat.home}/webapps" overwrite="true" />
		<!--  Many NCI applications require clm for csm, so you can point this to where you have the version you want to use
		<copy file="${bda-utils.dir}/clm-3.2.jar" todir="${tomcat.home}/server/${tomcat.server.name}/lib" overwrite="true" />
		-->
		<copy file="${database.driver.file}" todir="${tomcat.home}/common/lib" overwrite="true" />
		
	</target>

	<target name="install:tomcat:clinConn-webapp:configure" description="Configure clinConn-webapp application, copies over externalized properties or configurations that are not part of the tomcat configuration" unless="exclude.tomcat" depends="common:init">
		<!-- configure datasource -->
		
		<!-- Copy all files from template WEB-INF directory and subdirectories...no filtering -->
		<copy todir="${tomcat.home}/webapps/clinicalConnector/WEB-INF" overwrite="true" filtering="false">
			<fileset dir="${basedir}/${template.relative.dir}/WEB-INF">
				<include name="**/*" />
                        <exclude name="**/*struts2-core-2.1.8.1.jar" />
			</fileset>
		</copy>

		<!-- Copy specific files from template WEB-INF directory and subdirectories for filtering -->
		<copy   file="${basedir}/${template.relative.dir}/WEB-INF/classes/csm.new.hibernate.cfg.xml"
                  tofile="${tomcat.home}/webapps/clinicalConnector/WEB-INF/classes/${csm.application.name}.csm.new.hibernate.cfg.xml"
                  overwrite="true" filtering="true">
			<filterset refid="embedded.filterset"/>
			<filterset>
				<filtersfile file="${properties.file}"/>
				<filtersfile file="project.properties"/>
			</filterset>
		</copy>

		<!-- Copy all files from template conf directory and subdirectories...no filtering -->
		<copy todir="${tomcat.home}/${conf.relative.dir}" overwrite="true" filtering="false">
			<fileset dir="${basedir}/${template.relative.dir}/${conf.relative.dir}">
				<include name="**/*" />
			</fileset>
		</copy>

		<xmltask preservetype="true" 
                     source="${clinConn-webapp.dir.dist}/WEB-INF/etc/globus_wsrf_core/server-config.wsdd" 
                       dest="${tomcat.home}/webapps/clinicalConnector/WEB-INF/etc/globus_wsrf_core/server-config.wsdd">
			<xmlcatalog refid="bda.xml.catalog"/>
			<insert path="//*[local-name()='globalConfiguration']" >
			<![CDATA[
                           <parameter name="disableDNS" value="true"/>
                           <parameter name="logicalHost" value="${tomcat.hostname}"/>
                        ]]>
                        </insert>
                </xmltask>

		<!-- Copy specific files from template conf directory and subdirectories for filtering -->
		<copy todir="${tomcat.home}/${conf.relative.dir}" overwrite="true" filtering="true">
			<fileset dir="${basedir}/${template.relative.dir}/${conf.relative.dir}">
				<include name="**/*.properties" />
				<include name="**/*.config" />
				<include name="**/clinicalConnector.xml" />
				<include name="**/security-properties.xml" />
			</fileset>
			<filterset refid="embedded.filterset"/>
			<filterset>
				<filtersfile file="${properties.file}"/>
				<filtersfile file="project.properties"/>
			</filterset>
		</copy>
		
		
		<mkdir dir="${deploy.dll.dir}" />
		<copy todir="${deploy.dll.dir}" overwrite="true">
			<fileset dir="${basedir}/${dll.relative.dir}">
				<include name="**/*.dll" />
                        </fileset>
                </copy>
		
	</target>

	<target name="install:tomcat:C3DGridService-webapp:configure" description="Configure C3DGridService-webapp application, copies over externalized properties or configurations that are not part of the tomcat configuration" unless="exclude.tomcat" depends="common:init">
		<!-- configure datasource -->
		
		<!-- Copy all files from template WEB-INF directory and subdirectories...no filtering -->
		<copy todir="${tomcat.home}/webapps/C3DGrid/WEB-INF" overwrite="true" filtering="false">
			<fileset dir="${basedir}/${template.relative.dir}/WEB-INF">
				<include name="**/*" />
                        <exclude name="**/*struts2-core-2.1.8.1.jar" />
			</fileset>
		</copy>

		<!-- Copy specific files from template WEB-INF directory and subdirectories for filtering -->
		<copy   file="${basedir}/${template.relative.dir}/WEB-INF/classes/csm.new.hibernate.cfg.xml"
                  tofile="${tomcat.home}/webapps/C3DGrid/WEB-INF/classes/${csm.application.name}.csm.new.hibernate.cfg.xml"
                  overwrite="true" filtering="true">
			<filterset refid="embedded.filterset"/>
			<filterset>
				<filtersfile file="${properties.file}"/>
				<filtersfile file="project.properties"/>
			</filterset>
		</copy>

		<!-- Copy all files from template conf directory and subdirectories...no filtering -->
		<copy todir="${tomcat.home}/${conf.relative.dir}" overwrite="true" filtering="false">
			<fileset dir="${basedir}/${template.relative.dir}/${conf.relative.dir}">
				<include name="**/*" />
			</fileset>
		</copy>

		<xmltask preservetype="true" 
                     source="${clinConn-webapp.dir.dist}/WEB-INF/etc/globus_wsrf_core/server-config.wsdd" 
                       dest="${tomcat.home}/webapps/C3DGrid/WEB-INF/etc/globus_wsrf_core/server-config.wsdd">
			<xmlcatalog refid="bda.xml.catalog"/>
			<insert path="//*[local-name()='globalConfiguration']" >
			<![CDATA[
                           <parameter name="disableDNS" value="true"/>
                           <parameter name="logicalHost" value="${tomcat.hostname}"/>
                        ]]>
                        </insert>
                </xmltask>

		<!-- Copy specific files from template conf directory and subdirectories for filtering -->
		<copy todir="${tomcat.home}/${conf.relative.dir}" overwrite="true" filtering="true">
			<fileset dir="${basedir}/${template.relative.dir}/${conf.relative.dir}">
				<include name="**/*.properties" />
				<include name="**/*.config" />
				<include name="**/C3DGrid.xml" />
				<include name="**/security-properties.xml" />
			</fileset>
			<filterset refid="embedded.filterset"/>
			<filterset>
				<filtersfile file="${properties.file}"/>
				<filtersfile file="project.properties"/>
			</filterset>
		</copy>
		
		
		<!--<mkdir dir="${deploy.dll.dir}" />
		<copy todir="${deploy.dll.dir}" overwrite="true">
			<fileset dir="${basedir}/${dll.relative.dir}">
				<include name="**/*.dll" />
                        </fileset>
                </copy> -->
		
	</target>

	<target name="install:tomcat:clinConn-webapp:re-configure" description="Configure clinConn-webapp application, copies over externalized properties or configurations that are not part of the tomcat configuration" unless="exclude.tomcat" depends="common:init">
	</target>

	<target name="upgrade:common:init" depends="
		upgrade:tomcat:init
		" unless="install.running">
	</target>

	<target name="upgrade:tomcat:init" unless="install.running"
		depends="
		upgrade:tomcat:init:prep,
		upgrade:tomcat:readers:bda,
		upgrade:tomcat:readers:custom
		">
		<properties-print
			properties.list="${read.properties.list}"
			/>
		<properties-exist
			properties.list="${read.properties.list}"
			/>
		<properties-write
			properties.list="${read.properties.list}"
			/>
	</target>

	<target name="upgrade:database:init" unless="install.running"
		depends="
		upgrade:database:readers:bda,
 		upgrade:database:readers:custom
		">
		<!-- You need to either depend on jboss or tomcat so that you can read the db properties from it's configs.  BDA only has macros to read database properties from jboss. -->
	</target>

	<target name="upgrade:common:init:prep" unless="install.running">
		<if>
			<not>
				<isset property="application.base.path"/>
			</not>
			<then>
				<!-- Set application.base.path based on platform -->
				<condition property="application.base.path" value="${application.base.path.linux}">
					<or>
						<os family="unix" />
						<os family="mac" />
					</or>
				</condition>
			
				<condition property="application.base.path" value="${application.base.path.windows}">
					<os family="windows" />
				</condition>
				<echo message="application.base.path=${application.base.path}"/>
			</then>
		</if>
		<properties-print
			properties.list="application.base.path,jboss.home,tomcat.home,jboss.server.name"
			/>
		<var name="read.properties.list" value=""/>
		<property name="upgrade.running" value="true"/>
	</target>

	<target name="upgrade:tomcat:init:prep" depends="upgrade:common:init:prep" unless="install.running">
		<property name="tomcat.home" value="${application.base.path}/${tomcat.relative.path}"/>
		<!-- Upgrades always use port configs -->
		<available file="${tomcat.home}" property="tomcat.exists"/>
		<property name="read.tomcat.home" value="${tomcat.home}"/>
	</target>

	<target name="upgrade:tomcat:readers:custom" unless="install.running">
		<!-- call your custom readers here, two properties included in these scripts that don't have readers are "fs-data.base.dir, mail.smtp.server" -->
	</target>

	<target name="upgrade:database:readers:custom" unless="install.running">
		<!-- call your custom readers here, two properties included in these scripts that don't have readers are "fs-data.base.dir, mail.smtp.server" -->
	</target>

	<target name="upgrade:database:readers:bda" if="jboss.exists">
	
			<!-- Make sure the ${properties.file} has at least the following props -->
			<properties-exist
				properties.list="application.base.path,jboss.home,jboss.server.name"
				/>
			<jboss-read-dbconfig
				jboss.home="${read.jboss.home}"
				jboss.ds-xml.file="clinConn-ds.xml"
				/>
		</target>

	<target name="upgrade:tomcat:readers:bda" depends="upgrade:tomcat:init:prep" if="tomcat.exists">

		<!-- Make sure the ${properties.file} has at least the following props -->
		<properties-exist
			properties.list="application.base.path,tomcat.home"
			/>
		<!-- Begin Tomcat readers, delete if you don't need -->
		<osfamily property="os.family"/>
		<if>
			<or>
				<equals arg1="${os.family}" arg2="unix"/>
				<equals arg1="${os.family}" arg2="mac"/>
			</or>
			<then>
				<property name="tomcat.hostname" value="${env.HOSTNAME}"/>
			</then>
		</if>
		<if>
			<equals arg1="${os.family}" arg2="windows"/>
			<then>
				<property name="tomcat.hostname" value="${env.COMPUTERNAME}"/>
			</then>
		</if>
		<tomcat-read-ports
			tomcat.home="${read.tomcat.home}"
			/>
		<!--
		<var name="tomcat.ssl.keystore.dir" value="${working.dir}/keys/tomcat"/>
		<tomcat-read-ssl
			tomcat.home="${read.tomcat.home}"
			copied.keystore.dir="${tomcat.ssl.keystore.dir}"
			/>              
		-->
		<tomcat-read-external-hostname
			tomcat.home="${read.tomcat.home}"
			/>
		<grid-read-index-url
			grid.wsrf.dir="${read.tomcat.home}/webapps/wsrf"
			/>
		<var name="tomcat.grid.secure.dir" value="${working.dir}/keys/tomcat"/>
		<tomcat-read-grid-secure
			tomcat.home="${read.tomcat.home}"
			copied.keystore.dir="${tomcat.grid.secure.dir}"
			/>
		<!--
		<property name="copied.tomcat.service-metadata.dir" value="${working.dir}/tomcat-grid"/>
		<grid-copy-service-metadata
			grid.wsrf.dir="${tomcat.home}/webapps/wsrf"
			copied.service-metadata.dir="${copied.service-metadata.dir1}"
			/>
		-->
		<!--
		<grid-read-poc
			grid.wsrf.dir="${read.tomcat.home}/webapps/wsrf"
			grid.service.name="Sample"
			/>                      

                --> 
		<!-- Fail if any read properties are not set -->
		<echo message="All properties after readers"/>
		<tomcat-read-dbconfig
			/>
	</target>

	<target name="upgrade:post:tomcat">
		<!-- place holder -->
	</target>

	<target name="test:fail">
		<fail message="This target is supposed to cause a build failure.  This target can be used to verfiy that &lt;exec/&gt; calls are catching failures."/>
	</target>
</project>
